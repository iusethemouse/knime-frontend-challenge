{"ast":null,"code":"import { onMounted, ref, computed } from \"vue\";\nimport interact from \"interactjs\";\nimport InputPort from \"./node-components/InputPort.vue\";\nimport OutputPort from \"./node-components/OutputPort.vue\";\nimport NodeStatus from \"./node-components/NodeStatus.vue\";\nexport default {\n  __name: 'NodeObject',\n  props: {\n    initialX: {\n      type: Number,\n      required: true\n    },\n    initialY: {\n      type: Number,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    numInputs: {\n      type: Number,\n      required: true\n    },\n    numOutputs: {\n      type: Number,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    color: {\n      type: String,\n      required: true\n    },\n    icon: {\n      type: String,\n      required: true\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const screenX = ref(props.initialX);\n    const screenY = ref(props.initialY);\n    const draggableNode = ref(null);\n    const iconPath = computed(() => {\n      return `../assets/${props.icon}`;\n    });\n    const initInteract = selector => {\n      interact(selector).draggable({\n        restrict: {\n          restriction: \"parent\",\n          endOnly: true,\n          elementRect: {\n            top: 0,\n            left: 0,\n            bottom: 1,\n            right: 1\n          }\n        },\n        onmove: dragMoveListener,\n        onend: onDragEnd\n      });\n    };\n    const dragMoveListener = event => {\n      event.stopPropagation();\n      const target = event.target;\n      const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n      const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n      const x = initialX + event.dx;\n      const y = initialY + event.dy;\n      target.style.webkitTransform = target.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n      target.setAttribute(\"data-x\", x.toString());\n      target.setAttribute(\"data-y\", y.toString());\n    };\n    const onDragEnd = event => {\n      const target = event.target;\n      screenX.value = target.getBoundingClientRect().left;\n      screenY.value = target.getBoundingClientRect().top;\n    };\n    onMounted(() => {\n      if (draggableNode.value) {\n        const initialTransform = `translate(${screenX.value}px, ${screenY.value}px)`;\n        draggableNode.value.style.transform = initialTransform;\n        draggableNode.value.setAttribute(\"data-x\", screenX.value.toString());\n        draggableNode.value.setAttribute(\"data-y\", screenY.value.toString());\n        initInteract(draggableNode.value);\n      }\n    });\n    const __returned__ = {\n      props,\n      screenX,\n      screenY,\n      draggableNode,\n      iconPath,\n      initInteract,\n      dragMoveListener,\n      onDragEnd,\n      onMounted,\n      ref,\n      computed,\n      get interact() {\n        return interact;\n      },\n      InputPort,\n      OutputPort,\n      NodeStatus\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","computed","interact","InputPort","OutputPort","NodeStatus","screenX","props","initialX","screenY","initialY","draggableNode","iconPath","icon","initInteract","selector","draggable","restrict","restriction","endOnly","elementRect","top","left","bottom","right","onmove","dragMoveListener","onend","onDragEnd","event","stopPropagation","target","parseFloat","getAttribute","x","dx","y","dy","style","webkitTransform","transform","setAttribute","toString","value","getBoundingClientRect","initialTransform"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n  <div ref=\"draggableNode\" class=\"node-object\">\n    <div class=\"node-container\">\n      <p class=\"node-name\">{{ name }}</p>\n      <div class=\"node\" :style=\"{ backgroundColor: color }\">\n        <img :src=\"iconPath\" alt=\"Node icon\" class=\"node-icon\" />\n        <div class=\"inputs\">\n          <InputPort v-for=\"(input, index) in numInputs\" :key=\"index\" />\n        </div>\n        <div class=\"outputs\">\n          <OutputPort v-for=\"(output, index) in numOutputs\" :key=\"index\" />\n        </div>\n      </div>\n      <NodeStatus />\n      <p class=\"node-type\">{{ type }}</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref, computed, defineProps } from \"vue\";\nimport interact from \"interactjs\";\nimport InputPort from \"./node-components/InputPort.vue\";\nimport OutputPort from \"./node-components/OutputPort.vue\";\nimport NodeStatus from \"./node-components/NodeStatus.vue\";\n\nconst props = defineProps({\n  initialX: {\n    type: Number,\n    required: true,\n  },\n  initialY: {\n    type: Number,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  numInputs: {\n    type: Number,\n    required: true,\n  },\n  numOutputs: {\n    type: Number,\n    required: true,\n  },\n  type: {\n    type: String,\n    required: true,\n  },\n  color: {\n    type: String,\n    required: true,\n  },\n  icon: {\n    type: String,\n    required: true,\n  },\n});\n\nconst screenX = ref(props.initialX);\nconst screenY = ref(props.initialY);\nconst draggableNode = ref(null);\n\nconst iconPath = computed(() => {\n  return `../assets/${props.icon}`;\n});\n\nconst initInteract = (selector) => {\n  interact(selector).draggable({\n    restrict: {\n      restriction: \"parent\",\n      endOnly: true,\n      elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n    },\n    onmove: dragMoveListener,\n    onend: onDragEnd,\n  });\n};\n\nconst dragMoveListener = (event) => {\n  event.stopPropagation();\n\n  const target = event.target;\n\n  const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n  const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n\n  const x = initialX + event.dx;\n  const y = initialY + event.dy;\n\n  target.style.webkitTransform = target.style.transform =\n    \"translate(\" + x + \"px, \" + y + \"px)\";\n\n  target.setAttribute(\"data-x\", x.toString());\n  target.setAttribute(\"data-y\", y.toString());\n};\n\nconst onDragEnd = (event) => {\n  const target = event.target;\n  screenX.value = target.getBoundingClientRect().left;\n  screenY.value = target.getBoundingClientRect().top;\n};\n\nonMounted(() => {\n  if (draggableNode.value) {\n    const initialTransform = `translate(${screenX.value}px, ${screenY.value}px)`;\n    draggableNode.value.style.transform = initialTransform;\n    draggableNode.value.setAttribute(\"data-x\", screenX.value.toString());\n    draggableNode.value.setAttribute(\"data-y\", screenY.value.toString());\n    initInteract(draggableNode.value);\n  }\n});\n</script>\n\n<style scoped>\n.node-object {\n  /* border-radius: 5%; */\n  border: 1px solid black;\n  /* width: 70px; */\n  /* height: 70px; */\n  /* background-color: rgb(255, 149, 51); */\n  /* color: #fff; */\n  padding: 5px;\n  position: absolute;\n}\n.node-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Arial, sans-serif;\n}\n\n.node-name {\n  margin: 0;\n  margin-bottom: 5px;\n}\n\n.node {\n  border-radius: 3px;\n  position: relative;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: yellow; */\n}\n\n.inputs,\n.outputs {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n}\n\n.inputs {\n  left: -10px;\n}\n\n.outputs {\n  right: -10px;\n}\n\n.node-status {\n  margin: 0;\n  margin-top: 5px;\n}\n\n.node-type {\n  margin: 0;\n  margin-top: 5px;\n}\n\n.node-icon {\n  width: 20px;\n  height: 20px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}