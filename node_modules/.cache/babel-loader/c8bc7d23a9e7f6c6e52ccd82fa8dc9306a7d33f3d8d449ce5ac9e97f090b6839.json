{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    ref: \"draggableNode\",\n    class: \"node-object\",\n    style: _normalizeStyle({\n      top: $props.initialY + 'px',\n      left: $props.initialX + 'px'\n    })\n  }, \" Node \", 4 /* STYLE */);\n}","map":{"version":3,"names":["_createElementBlock","ref","class","style","_normalizeStyle","top","$props","initialY","left","initialX"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n    <div ref=\"draggableNode\" class=\"node-object\" :style=\"{ top: initialY + 'px', left: initialX + 'px' }\">\n      Node\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted, toRefs } from \"vue\";\nimport interact from \"interactjs\";\n\nexport default {\n  name: \"NodeObject\",\n  props: {\n    initialX: {\n      type: Number,\n      required: true,\n    },\n    initialY: {\n      type: Number,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { initialX, initialY } = toRefs(props);\n    const screenX = ref(initialX.value);\n    const screenY = ref(initialY.value);\n    const draggableNode = ref(null);\n\n    const initInteract = (selector) => {\n      interact(selector).draggable({\n        restrict: {\n          restriction: \"parent\",\n          endOnly: true,\n          elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n        },\n        onmove: dragMoveListener,\n        onend: onDragEnd,\n      });\n    };\n\n    const dragMoveListener = (event) => {\n      event.stopPropagation();\n\n      const target = event.target;\n\n      const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n      const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n\n      const x = initialX + event.dx;\n      const y = initialY + event.dy;\n\n      target.style.webkitTransform = target.style.transform =\n        \"translate(\" + x + \"px, \" + y + \"px)\";\n\n      target.setAttribute(\"data-x\", x);\n      target.setAttribute(\"data-y\", y);\n    };\n\n\n    const onDragEnd = (event) => {\n      const target = event.target;\n      screenX.value = target.getBoundingClientRect().left;\n      screenY.value = target.getBoundingClientRect().top;\n    };\n\n    onMounted(() => {\n      draggableNode.value.setAttribute(\"data-x\", screenX.value);\n      draggableNode.value.setAttribute(\"data-y\", screenY.value);\n      initInteract(draggableNode.value);\n    });\n\n\n    return { draggableNode, screenX, screenY };\n  },\n};\n</script>\n\n<style scoped>\n.node-object {\n  border-radius: 5%;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(255, 149, 51);\n  color: #fff;\n  padding: 5px;\n  position: absolute;\n}\n</style>\n"],"mappings":";;uBACIA,mBAAA,CAEM;IAFDC,GAAG,EAAC,eAAe;IAACC,KAAK,EAAC,aAAa;IAAEC,KAAK,EAAAC,eAAA;MAAAC,GAAA,EAASC,MAAA,CAAAC,QAAQ;MAAAC,IAAA,EAAeF,MAAA,CAAAG,QAAQ;IAAA;KAAW,QAEtG"},"metadata":{},"sourceType":"module","externalDependencies":[]}