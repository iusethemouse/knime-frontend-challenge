{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, normalizeStyle as _normalizeStyle, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b96114de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"draggableNode\",\n  class: \"node-object\"\n};\nconst _hoisted_2 = {\n  class: \"node-container\"\n};\nconst _hoisted_3 = {\n  class: \"node-name\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"inputs\"\n};\nconst _hoisted_6 = {\n  class: \"outputs\"\n};\nconst _hoisted_7 = {\n  class: \"node-type\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString($props.name), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: \"node-body\",\n    style: _normalizeStyle({\n      backgroundColor: $props.color\n    })\n  }, [_createElementVNode(\"img\", {\n    src: $setup.iconPath,\n    alt: \"Node icon\",\n    class: \"node-icon\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.numInputs, (input, index) => {\n    return _openBlock(), _createBlock($setup[\"InputPort\"], {\n      key: index\n    });\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.numOutputs, (output, index) => {\n    return _openBlock(), _createBlock($setup[\"OutputPort\"], {\n      key: index\n    });\n  }), 128 /* KEYED_FRAGMENT */))])], 4 /* STYLE */), _createVNode($setup[\"NodeStatus\"]), _createElementVNode(\"p\", _hoisted_7, _toDisplayString($props.type), 1 /* TEXT */)])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$props","name","style","_normalizeStyle","backgroundColor","color","src","$setup","iconPath","alt","_hoisted_5","_Fragment","_renderList","numInputs","input","index","_createBlock","key","_hoisted_6","numOutputs","output","_createVNode","_hoisted_7","type"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n  <div ref=\"draggableNode\" class=\"node-object\">\n    <div class=\"node-container\">\n      <p class=\"node-name\">{{ name }}</p>\n      <div class=\"node-body\" :style=\"{ backgroundColor: color }\">\n        <img :src=\"iconPath\" alt=\"Node icon\" class=\"node-icon\" />\n        <div class=\"inputs\">\n          <InputPort v-for=\"(input, index) in numInputs\" :key=\"index\" />\n        </div>\n        <div class=\"outputs\">\n          <OutputPort v-for=\"(output, index) in numOutputs\" :key=\"index\" />\n        </div>\n      </div>\n      <NodeStatus />\n      <p class=\"node-type\">{{ type }}</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, ref, computed, defineProps } from \"vue\";\nimport interact from \"interactjs\";\nimport InputPort from \"./node-components/InputPort.vue\";\nimport OutputPort from \"./node-components/OutputPort.vue\";\nimport NodeStatus from \"./node-components/NodeStatus.vue\";\n\nconst props = defineProps({\n  initialX: {\n    type: Number,\n    required: true,\n  },\n  initialY: {\n    type: Number,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  numInputs: {\n    type: Number,\n    required: true,\n  },\n  numOutputs: {\n    type: Number,\n    required: true,\n  },\n  type: {\n    type: String,\n    required: true,\n  },\n  color: {\n    type: String,\n    required: true,\n  },\n  icon: {\n    type: String,\n    required: true,\n  },\n});\n\nconst screenX = ref(props.initialX);\nconst screenY = ref(props.initialY);\nconst draggableNode = ref(null);\n\nconst iconPath = computed(() => {\n  return require(`../assets/${props.icon}`);\n});\n\nconst initInteract = (selector) => {\n  interact(selector.querySelector(\".node-body\")).draggable({\n    restrict: {\n      restriction: \"parent\",\n      endOnly: true,\n      elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n    },\n    onmove: dragMoveListener,\n    onend: onDragEnd,\n  });\n};\n\nconst dragMoveListener = (event) => {\n  event.stopPropagation();\n\n  const target = event.target;\n\n  const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n  const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n\n  const x = initialX + event.dx;\n  const y = initialY + event.dy;\n\n  target.style.webkitTransform = target.style.transform =\n    \"translate(\" + x + \"px, \" + y + \"px)\";\n\n  target.setAttribute(\"data-x\", x.toString());\n  target.setAttribute(\"data-y\", y.toString());\n};\n\nconst onDragEnd = (event) => {\n  const target = event.target;\n  screenX.value = target.getBoundingClientRect().left;\n  screenY.value = target.getBoundingClientRect().top;\n};\n\nonMounted(() => {\n  if (draggableNode.value) {\n    const initialTransform = `translate(${screenX.value}px, ${screenY.value}px)`;\n    draggableNode.value.style.transform = initialTransform;\n    draggableNode.value.setAttribute(\"data-x\", screenX.value.toString());\n    draggableNode.value.setAttribute(\"data-y\", screenY.value.toString());\n    initInteract(draggableNode.value);\n  }\n});\n</script>\n\n<style scoped>\n.node-object {\n  border: 1px solid black;\n  padding: 5px;\n  position: absolute;\n}\n.node-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Arial, sans-serif;\n}\n\n.node-name {\n  margin: 0;\n  margin-bottom: 5px;\n}\n\n.node-body {\n  border-radius: 3px;\n  position: relative;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* background-color: yellow; */\n}\n\n.inputs,\n.outputs {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n}\n\n.inputs {\n  left: -10px;\n}\n\n.outputs {\n  right: -10px;\n}\n\n.node-status {\n  margin: 0;\n  margin-top: 5px;\n}\n\n.node-type {\n  margin: 0;\n  margin-top: 5px;\n}\n\n.node-icon {\n  width: 20px;\n  height: 20px;\n}\n</style>\n"],"mappings":";;;EACOA,GAAG,EAAC,eAAe;EAACC,KAAK,EAAC;;;EACxBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAW;;;EAGbA,KAAK,EAAC;AAAQ;;EAGdA,KAAK,EAAC;AAAS;;EAKnBA,KAAK,EAAC;AAAW;;uBAbxBC,mBAAA,CAeM,OAfNC,UAeM,GAdJC,mBAAA,CAaM,OAbNC,UAaM,GAZJD,mBAAA,CAAmC,KAAnCE,UAAmC,EAAAC,gBAAA,CAAXC,MAAA,CAAAC,IAAI,kBAC5BL,mBAAA,CAQM;IARDH,KAAK,EAAC,WAAW;IAAES,KAAK,EAAAC,eAAA;MAAAC,eAAA,EAAqBJ,MAAA,CAAAK;IAAK;MACrDT,mBAAA,CAAyD;IAAnDU,GAAG,EAAEC,MAAA,CAAAC,QAAQ;IAAEC,GAAG,EAAC,WAAW;IAAChB,KAAK,EAAC;uCAC3CG,mBAAA,CAEM,OAFNc,UAEM,I,kBADJhB,mBAAA,CAA8DiB,SAAA,QAAAC,WAAA,CAA1BZ,MAAA,CAAAa,SAAS,GAA1BC,KAAK,EAAEC,KAAK;yBAA/BC,YAAA,CAA8DT,MAAA;MAAdU,GAAG,EAAEF;IAAK;oCAE5DnB,mBAAA,CAEM,OAFNsB,UAEM,I,kBADJxB,mBAAA,CAAiEiB,SAAA,QAAAC,WAAA,CAA3BZ,MAAA,CAAAmB,UAAU,GAA5BC,MAAM,EAAEL,KAAK;yBAAjCC,YAAA,CAAiET,MAAA;MAAdU,GAAG,EAAEF;IAAK;qDAGjEM,YAAA,CAAcd,MAAA,iBACdX,mBAAA,CAAmC,KAAnC0B,UAAmC,EAAAvB,gBAAA,CAAXC,MAAA,CAAAuB,IAAI,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}