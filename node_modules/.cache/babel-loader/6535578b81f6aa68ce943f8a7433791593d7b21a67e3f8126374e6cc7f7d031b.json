{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b96114de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"draggableNode\",\n  class: \"node-object\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, \" Draggable Node \", 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n    <div ref=\"draggableNode\" class=\"node-object\">\n      Draggable Node\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \"vue\";\nimport interact from \"interactjs\";\n\nexport default {\n  name: \"NodeObject\",\n  setup() {\n    const screenX = ref(0);\n    const screenY = ref(0);\n    const draggableNode = ref(null);\n\n    const initInteract = (selector) => {\n      interact(selector).draggable({\n        inertia: true,\n        restrict: {\n          restriction: \"parent\",\n          endOnly: true,\n          elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n        },\n        autoScroll: true,\n        onmove: dragMoveListener,\n        onend: onDragEnd,\n      });\n    };\n\n    const dragMoveListener = (event) => {\n      const target = event.target;\n      const x =\n        (parseFloat(target.getAttribute(\"data-x\")) || screenX.value) +\n        event.dx;\n      const y =\n        (parseFloat(target.getAttribute(\"data-y\")) || screenY.value) +\n        event.dy;\n\n      target.style.webkitTransform = target.style.transform =\n        \"translate(\" + x + \"px, \" + y + \"px)\";\n\n      target.setAttribute(\"data-x\", x);\n      target.setAttribute(\"data-y\", y);\n    };\n\n    const onDragEnd = (event) => {\n      const target = event.target;\n      screenX.value = target.getBoundingClientRect().left;\n      screenY.value = target.getBoundingClientRect().top;\n    };\n\n    onMounted(() => {\n      initInteract(draggableNode.value);\n    });\n\n    return { draggableNode, screenX, screenY };\n  },\n};\n</script>\n\n<style scoped>\n.node-object {\n  border-radius: 5%;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(248, 223, 29);\n  color: #fff;\n  padding: 5px;\n  position: absolute;\n}\n</style>\n"],"mappings":";;;EACSA,GAAG,EAAC,eAAe;EAACC,KAAK,EAAC;;;uBAA/BC,mBAAA,CAEM,OAFNC,UAEM,EAFuC,kBAE7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}