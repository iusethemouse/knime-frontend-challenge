{"ast":null,"code":"import { vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-63972d9c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"search-field\"\n};\nconst _hoisted_2 = {\n  class: \"input-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"suggestion-list\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.searchText = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => _ctx.updateSuggestions && _ctx.updateSuggestions(...args)),\n    onKeydown: _cache[2] || (_cache[2] = _withKeys((...args) => _ctx.selectSuggestion && _ctx.selectSuggestion(...args), [\"enter\"])),\n    placeholder: \"Add new node...\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, _ctx.searchText]]), _ctx.suggestions.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.suggestions, (suggestion, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      onClick: $event => _ctx.selectSuggestion(index)\n    }, _toDisplayString(suggestion), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","type","_ctx","searchText","$event","onInput","_cache","args","updateSuggestions","onKeydown","_withKeys","selectSuggestion","placeholder","suggestions","length","_hoisted_3","_Fragment","_renderList","suggestion","index","key","onClick","_hoisted_4"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/SearchField.vue"],"sourcesContent":["<template>\n  <div class=\"search-field\">\n    <div class=\"input-container\">\n      <input\n        type=\"text\"\n        v-model=\"searchText\"\n        @input=\"updateSuggestions\"\n        @keydown.enter=\"selectSuggestion\"\n        placeholder=\"Add new node...\"\n      />\n      <ul v-if=\"suggestions.length\" class=\"suggestion-list\">\n        <li\n          v-for=\"(suggestion, index) in suggestions\"\n          :key=\"index\"\n          @click=\"selectSuggestion(index)\"\n        >\n          {{ suggestion }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref } from \"vue\";\n\nexport default defineComponent({\n  name: \"SearchField\",\n  setup(props, { emit }) {\n    const searchText = ref(\"\");\n    const suggestions = ref([]);\n\n    const updateSuggestions = () => {\n      // Fetch suggestions based on searchText.value\n      // For now, let's use a hardcoded array of node names\n      const allNodes = [\"Node 1\", \"Node 2\", \"Node 3\"];\n      suggestions.value = allNodes.filter((node) =>\n        node.toLowerCase().includes(searchText.value.toLowerCase())\n      );\n    };\n\n    const selectSuggestion = (index = -1) => {\n      if (index < 0) {\n        index = suggestions.value.findIndex(\n          (suggestion) =>\n            suggestion.toLowerCase() === searchText.value.toLowerCase()\n        );\n      }\n\n      if (index >= 0) {\n        const selectedNode = suggestions.value[index];\n        searchText.value = \"\";\n        suggestions.value = [];\n        // Emit the event with the selected node\n        emit(\"add-node\", selectedNode);\n      }\n    };\n\n    return { searchText, suggestions, updateSuggestions, selectSuggestion };\n  },\n});\n</script>\n\n<style scoped>\n.search-field {\n  margin: 10px;\n}\n\n.input-container {\n  position: relative;\n  display: inline-block;\n}\n\ninput {\n  width: 200px;\n}\n\n.suggestion-list {\n  position: absolute;\n  background-color: white;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  max-height: 200px;\n  overflow-y: auto;\n  width: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.suggestion-list li {\n  padding: 10px;\n  cursor: pointer;\n}\n\n.suggestion-list li:hover {\n  background-color: #eee;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAiB;;;EAQIA,KAAK,EAAC;;;;uBATxCC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,mBAAA,CAiBM,OAjBNC,UAiBM,G,gBAhBJD,mBAAA,CAME;IALAE,IAAI,EAAC,MAAM;+DACFC,IAAA,CAAAC,UAAU,GAAAC,MAAA;IAClBC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,IAAA,CAAAM,iBAAA,IAAAN,IAAA,CAAAM,iBAAA,IAAAD,IAAA,CAAiB;IACxBE,SAAO,EAAAH,MAAA,QAAAA,MAAA,MAAAI,SAAA,KAAAH,IAAA,KAAQL,IAAA,CAAAS,gBAAA,IAAAT,IAAA,CAAAS,gBAAA,IAAAJ,IAAA,CAAgB;IAChCK,WAAW,EAAC;iEAHHV,IAAA,CAAAC,UAAU,E,GAKXD,IAAA,CAAAW,WAAW,CAACC,MAAM,I,cAA5BjB,mBAAA,CAQK,MARLkB,UAQK,I,kBAPHlB,mBAAA,CAMKmB,SAAA,QAAAC,WAAA,CAL2Bf,IAAA,CAAAW,WAAW,GAAjCK,UAAU,EAAEC,KAAK;yBAD3BtB,mBAAA,CAMK;MAJFuB,GAAG,EAAED,KAAK;MACVE,OAAK,EAAAjB,MAAA,IAAEF,IAAA,CAAAS,gBAAgB,CAACQ,KAAK;wBAE3BD,UAAU,wBAAAI,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}