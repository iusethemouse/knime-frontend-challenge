{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b96114de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"draggableNode\",\n  class: \"node-object\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"node\", -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n    <div ref=\"draggableNode\" class=\"node-object\">\n      <p>node</p>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted, toRefs } from \"vue\";\nimport interact from \"interactjs\";\n\nexport default {\n  name: \"NodeObject\",\n  props: {\n    initialX: {\n      type: Number,\n      required: true,\n    },\n    initialY: {\n      type: Number,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { initialX, initialY } = toRefs(props);\n    const screenX = ref(initialX.value);\n    const screenY = ref(initialY.value);\n    const draggableNode = ref(null);\n\n    const initInteract = (selector) => {\n      interact(selector).draggable({\n        restrict: {\n          restriction: \"parent\",\n          endOnly: true,\n          elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n        },\n        onmove: dragMoveListener,\n        onend: onDragEnd,\n      });\n    };\n\n    const dragMoveListener = (event) => {\n      event.stopPropagation();\n\n      const target = event.target;\n\n      const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n      const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n\n      const x = initialX + event.dx;\n      const y = initialY + event.dy;\n\n      target.style.webkitTransform = target.style.transform =\n        \"translate(\" + x + \"px, \" + y + \"px)\";\n\n      target.setAttribute(\"data-x\", x);\n      target.setAttribute(\"data-y\", y);\n    };\n\n\n    const onDragEnd = (event) => {\n      const target = event.target;\n      screenX.value = target.getBoundingClientRect().left;\n      screenY.value = target.getBoundingClientRect().top;\n    };\n\n    onMounted(() => {\n      const initialTransform = `translate(${screenX.value}px, ${screenY.value}px)`;\n      draggableNode.value.style.transform = draggableNode.value.style.webkitTransform = initialTransform;\n      draggableNode.value.setAttribute(\"data-x\", screenX.value);\n      draggableNode.value.setAttribute(\"data-y\", screenY.value);\n      initInteract(draggableNode.value);\n    });\n\n\n\n    return { draggableNode, screenX, screenY };\n  },\n};\n</script>\n\n<style scoped>\n.node-object {\n  border-radius: 5%;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(255, 149, 51);\n  color: #fff;\n  padding: 5px;\n  position: absolute;\n}\n</style>\n"],"mappings":";;;EACSA,GAAG,EAAC,eAAe;EAACC,KAAK,EAAC;;gEAC7BC,mBAAA,CAAW,WAAR,MAAI;oBAAPC,UAAW,C;;uBADbC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}