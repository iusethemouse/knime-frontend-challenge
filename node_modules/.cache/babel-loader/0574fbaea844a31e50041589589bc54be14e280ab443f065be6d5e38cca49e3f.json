{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b96114de\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"node\", -1 /* HOISTED */));\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    ref: \"draggableNode\",\n    class: _normalizeClass([\"node-object\", {\n      'selected-node': _ctx.isSelected\n    }]),\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => _ctx.selectNode && _ctx.selectNode(...args), [\"stop\"]))\n  }, _hoisted_2, 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","_createElementBlock","ref","class","_normalizeClass","_ctx","isSelected","onClick","_cache","_withModifiers","args","selectNode"],"sources":["/Users/ivan/dev/knime-frontend-challenge/interactive-workflow/src/components/NodeObject.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"draggableNode\"\n    class=\"node-object\"\n    :class=\"{ 'selected-node': isSelected }\"\n    @click.stop=\"selectNode\"\n  >\n    <p>node</p>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, onMounted, ref } from \"vue\";\nimport interact from \"interactjs\";\n\nexport default defineComponent({\n  name: \"NodeObject\",\n  props: {\n    initialX: {\n      type: Number,\n      required: true,\n    },\n    initialY: {\n      type: Number,\n      required: true,\n    },\n  },\n  setup(props) {\n    const screenX = ref(props.initialX);\n    const screenY = ref(props.initialY);\n    const draggableNode = ref(null);\n\n    const initInteract = (selector) => {\n      interact(selector).draggable({\n        restrict: {\n          restriction: \"parent\",\n          endOnly: true,\n          elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n        },\n        onmove: dragMoveListener,\n        onend: onDragEnd,\n      });\n    };\n\n    const dragMoveListener = (event) => {\n      event.stopPropagation();\n\n      const target = event.target;\n\n      const initialX = parseFloat(target.getAttribute(\"data-x\")) || 0;\n      const initialY = parseFloat(target.getAttribute(\"data-y\")) || 0;\n\n      const x = initialX + event.dx;\n      const y = initialY + event.dy;\n\n      target.style.webkitTransform = target.style.transform =\n        \"translate(\" + x + \"px, \" + y + \"px)\";\n\n      target.setAttribute(\"data-x\", x.toString());\n      target.setAttribute(\"data-y\", y.toString());\n    };\n\n    const onDragEnd = (event) => {\n      const target = event.target;\n      screenX.value = target.getBoundingClientRect().left;\n      screenY.value = target.getBoundingClientRect().top;\n    };\n\n    onMounted(() => {\n      if (draggableNode.value) {\n        const initialTransform = `translate(${screenX.value}px, ${screenY.value}px)`;\n        draggableNode.value.style.transform = initialTransform;\n        draggableNode.value.setAttribute(\"data-x\", screenX.value.toString());\n        draggableNode.value.setAttribute(\"data-y\", screenY.value.toString());\n        initInteract(draggableNode.value);\n      }\n    });\n\n    return { draggableNode, screenX, screenY };\n  },\n});\n</script>\n\n<style scoped>\n.node-object {\n  border-radius: 5%;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(255, 149, 51);\n  color: #fff;\n  padding: 5px;\n  position: absolute;\n}\n\n.selected-node {\n  border: 1px dashed #000;\n  box-sizing: border-box;\n}\n</style>\n"],"mappings":";;gEAOIA,mBAAA,CAAW,WAAR,MAAI;oBAAPC,UAAW,C;;uBANbC,mBAAA,CAOM;IANJC,GAAG,EAAC,eAAe;IACnBC,KAAK,EAAAC,eAAA,EAAC,aAAa;MAAA,iBACQC,IAAA,CAAAC;IAAU;IACpCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAOL,IAAA,CAAAM,UAAA,IAAAN,IAAA,CAAAM,UAAA,IAAAD,IAAA,CAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}